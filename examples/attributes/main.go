package main

import (
	"fmt"
	"github.com/eternalsad/formula"
)

func main() {
	parser := formula.NewSimpleParser()

	// Test cases
	testCases := []string{
		//"A + B",
		//"A + B * C",
		//"(A + B) * C",
		"IF(age = 18, salary * 1.2, salary)",
		//"IF(A + B > 1000, A * 2, B * 3)",
	}

	fmt.Println("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ —Ñ–æ—Ä–º—É–ª ===\n")

	for i, testCase := range testCases {
		fmt.Printf("–¢–µ—Å—Ç %d: %s\n", i+1, testCase)

		ast, err := parser.ParseString(testCase)
		if err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞: %v\n", err)
		} else {
			//fmt.Printf("‚úÖ AST: %s\n", ast.String())

			// –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å –ø—Ä–∏–º–µ—Ä–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
			// –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç–æ –≤ —Ç–∞–±–ª–∏—Ü–µ
			// –¥–æ–±–∞–≤–∏–º –ø–æ–ª–µ attributes
			// {
			//.  "A": {
			//.   "letter":"A",
			//.   "id": "12"
			//.   }
			// }
			// –∑–∞—Ç–µ–º –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –∏–∑ json –¥–æ—Å—Ç–∞—Ç—å –≤ —Ä–µ–ø–æ–∏–∑—Ç–æ—Ä–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω—É–∂–Ω—ã–µ –ø–æ –∞–π–¥–∏
			// –∏ –≤–æ—Ç —Å—é–¥–∞ –≤—Å—Ç–∞–≤–∏—Ç—å –≤ –≤–∏–¥–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
			variables := map[string]float64{
				"A":      10,
				"B":      5,
				"C":      2,
				"age":    18,
				"salary": 50000,
			}

			result, evalErr := ast.Evaluate(&formula.Context{
				Variables: variables,
				Functions: nil,
			})
			if evalErr != nil {
				fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: %v\n", evalErr)
			} else {
				fmt.Printf("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: %.2f\n", result)
			}
		}
		fmt.Println()
	}

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞
	fmt.Println("=== –ü–æ—à–∞–≥–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä —Ñ–æ—Ä–º—É–ª—ã 'IF(age > 18, salary * 1.2, salary)' ===")
	demonstrateTokenization("IF(age > 18, salary * 1.2, salary)")
}

// demonstrateTokenization shows how the lexer tokenizes input
func demonstrateTokenization(input string) {
	lexer := formula.NewLexer(input)
	fmt.Printf("–ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: %s\n", input)
	fmt.Println("–¢–æ–∫–µ–Ω—ã:")

	for {
		token := lexer.NextToken()
		if token.Type == formula.TokenEOF {
			break
		}

		var tokenTypeName string
		switch token.Type {
		case formula.TokenNumber:
			tokenTypeName = "NUMBER"
		case formula.TokenVariable:
			tokenTypeName = "VARIABLE"
		case formula.TokenOperator:
			tokenTypeName = "OPERATOR"
		case formula.TokenParenOpen:
			tokenTypeName = "PAREN_OPEN"
		case formula.TokenParenClose:
			tokenTypeName = "PAREN_CLOSE"
		case formula.TokenComma:
			tokenTypeName = "COMMA"
		case formula.TokenFunction:
			tokenTypeName = "FUNCTION"
		}

		fmt.Printf("  %s: '%s' (–ø–æ–∑–∏—Ü–∏—è %d)\n", tokenTypeName, token.Value, token.Pos)
	}
}
